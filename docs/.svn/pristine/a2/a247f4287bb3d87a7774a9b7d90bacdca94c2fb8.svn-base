#/!bin/python

__version__ = '0.1'
__author__ = 'Markus.Peura@fmi.fi'

import re
import subprocess

def read_conf(path, result):

    file = open(path, 'r')
    #if (file):
    read_conf_text(file, result)
    # else:
    # print "Could not open conf file: " + path        
    return result

def read_conf_text(text, result = {}):
    if (not text):
        print "Could not handle text: " + text
    else:
        for line in text:
            line = line.strip()
            if (line and (line[0] != '#')):
                line = line.split('=')
                result[line[0]] = line[1].strip('"\n\'')
    return result


# Demo
if __name__ == '__main__':

    import argparse
    
    parser = argparse.ArgumentParser()

    parser.add_argument("-c", "--conf", dest="CONF",
        default="nutshell.cnf",
        help="read config file", metavar="<file>")

    parser.add_argument("-t", "--test", dest="TEST",
        default="",
        help="simple assignment", metavar="<key>=<value>")

#    parser.add_argument("-i", "--inputConf", dest="INPUTCONF",
#        default="",
#        help="exec input config script", metavar="<file>")

    parser.add_argument("-v", "--verbose", dest="verbose", default=False, metavar="<level>",
        help="Print status messages to stdout")


    
    #(options, args) = parser.parse_args()
    options = parser.parse_args()

    if (not options):
        parser.print_help()
        exit(1)
    
    if options.verbose:
        print options
        print args

    result = {}
    
    if (options.CONF):
        read_conf(options.CONF, result)

    if (options.TEST):
        read_conf_text([options.TEST], result)
        #readConfScript(options.INPUTCONF, result)

    #print result

    for key,value in result.items():
        print '  {0}="{1}"'.format(key, value)
    
    exit(0)
        
