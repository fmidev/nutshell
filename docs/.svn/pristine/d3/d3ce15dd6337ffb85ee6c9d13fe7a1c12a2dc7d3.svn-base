

__version__ = '0.1'
__author__ = 'Markus.Peura@fmi.fi'

import argparse
import urllib
import BaseHTTPServer
import SimpleHTTPServer
import xml.etree.ElementTree as ET
from xml.dom import minidom
import os

# Pretty printing
# from xml.dom import minidom


import nutils
import nutxml    # HTML utils
import nutshell


# http://127.0.0.1:8088/rauno/ahonen?request=MAKE&product=201708121600_radar.rack.comp_SIZE=800,800_SITES=fikor,fivan,fiika.png

# Consider setting in conf?
HOST_NAME = ''
#PORT_NUMBER=8088


product_server = nutshell.ProductServer()



#SimpleHTTPRequestHandler


"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.
"""
#class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
class MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    counter = 0
    #htmlDoc = ''

    #@classmethod cls
    @staticmethod
    def get_html_template():
        try:
            html = ET.parse(product_server.HTML_TEMPLATE).getroot()
        except IOError as err:
            html = ET.Element('html')
            body = ET.Element('body')
            body.text = 'Note: Template file{0} not found'.format(cls.HTML_TEMPLATE)
            html.append(body)
        return html


    @staticmethod
    def parse_url(url):
        # splitquery('/path?query') --> '/path', 'query'.  # query returned also when None
        (path,query) = urllib.splitquery(url)
        data = {}
        if (query):
            params = urllib.unquote(query)
            for param in params.split('&'):
                # splitvalue('attr=value') --> 'attr', 'value'.
                (key,value) = urllib.splitvalue(param)
                if (key in data): # multiple
                    if (type(data[key]) != list):
                        data[key] = [data[key]]
                    data[key].append(value)
                else:
                    data[key] = value
        return (path, data)
    
    def do_POST(s):
        print 'POST method not implemented, redirecting to do_GET(): {0}'.format(s.path)
        #s.send_response(200)
        #s.end_headers()
        #varLen = int(s.headers['Content-Length'])
        #postVars = s.rfile.read(varLen)
        #print postVars

    def do_GET(s):

        ++MyHandler.counter

        # print s.path
        basepath,data = MyHandler.parse_url(s.path)
        # basepath.replace(HTTP_PATH_PREFIX, '')

        if (basepath == '/test'):
            s.send_response(200)
            s.end_headers()
            s.wfile.write("<html><body>Test</body></html>\n")
            return 

        # Directory and file requests are directed to default HTTP handler
        system_path = s.directory + basepath
        print system_path
        if (os.path.exists(system_path)):
            print "Ok, forwarding -> ", system_path
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(s)
            return

        if (basepath == '/stop'):
            s.send_response(200)
            s.end_headers()
            s.wfile.write("<html>Stopped server</html>")
            httpd.server_close()
            return 

        if (basepath == '/dirika'):
            s.send_response(303)
            s.send_header("location", "/reijo/maki")
            s.end_headers()
            return 

            
        s.send_response(200)
        #s.send_header('Content-type: ', 'image/png')
        s.end_headers()

        # NEW             
        html = MyHandler.get_html_template()
        head = nutxml.get_head(html)
        body = nutxml.get_body(html)

        #greeting = nutxml.get_by_id(body, 'greeting', 'h1')
        #greeting.text += "+"

        # Consider single table for all
        # table = ET.Element('table')
        # append_table(table, data, attributes)
        
        elem = nutxml.get_by_id(body, 'request')
        elem.append(nutxml.get_table(data, {"title": "Request"}))
 
        elem =  nutxml.get_by_id(body, 'status')
        elem.append(nutxml.get_table(product_server.get_status(), {"title": "Server status"}))
    
        elem =  nutxml.get_by_id(body, 'version', 'p')
        elem.text = str(product_server.__class__) + ' : ' + str(product_server.__doc__)

        #elem =  nutxml.get_by_id(body, 'misc', 'pre')
        #elem.text = "Cwd: " + os.cwd + '\n'
        
        product_info = nutshell.ProductInfo()
            
        if ('product' in data):
            product_info.parse(data['product'])
            #s.wfile.write('<h2>Product: ' + product_info.ID + '</h2>\n')
                
            if ('request' in data):

                request = data['request']
                if (type(request) != list):
                    request = str(request).split(',')

                #print request                
                #if ('MAKE' in request):
                product_request = product_server.make_request(product_info, request)

                if ('INPUTS' in request):
                    if (not product_request.inputs):
                        product_request.inputs = product_server.get_input_list(product_info).inputs
                    #layout = '<tr><td>{0}</td><td><a href="/nutshell/server?request=INPUTS&product={1}">{1}</a></td></tr>\n'
                    elem = nutxml.get_by_id(body, 'inputs')
                    elem.append(nutxml.get_table(product_request.inputs, {"title": "Product inputs", "border": "1"}))
                    
            env = product_info.get_param_env()
            elem =  nutxml.get_by_id(body, 'product')
            elem.append(nutxml.get_table(env, {"title": "Product ({0}) parameters".format(product_info.ID)}))

        elem = nutxml.get_by_tag(body, 'pre', {'id': 'dump'})
        elem.text = str(dir(product_server)) + '\n'
        elem.text += str(dir(s)) + '\n'
        elem.text += "Load: " + str(os.getloadavg()) + '\n'
        elem.text += "Cwd: " + s.directory + '\n'
        elem.text += "System side path: " + system_path + '\n'

        #print(ET.tostring(html))
        s.wfile.write(ET.tostring(html))
        #s.wfile.write(minidom.parseString(ET.tostring(html)).toprettyxml(indent = "   "))
        #minidom.parseString(etree.toString(root)).toprettyxml(indent = "   ")

        return
        

        #s.wfile.write("<html>")
        #s.wfile.write("<h1>Hello, this is NutServer!</h1>")
        #s.wfile.write("<b>Request #{0}</h1>".format(MyHandler.counter))
        #s.wfile.write('<p>' + basepath + '</p>\n')
        #s.wfile.write('<p>' + str(data) + '</p>\n')
        #s.wfile.write(nutxml.value_table(data, 'Query data'))
        
        #s.wfile.write("<pre>")
        #s.wfile.write("<hr/>\n")
        #s.wfile.write("</pre>")
        #s.wfile.write("</html>")



parser = argparse.ArgumentParser()



parser.add_argument("-c", "--conf", dest="CONF",
    default="nutshell.cnf", #ProductServer.CONF_FILE?
    help="read config file", metavar="<file>")

parser.add_argument("-p", "--port",
                    dest="HTTP_PORT",
                    default=0,
                    type=int,
                    help="http port", metavar="<int>")

parser.add_argument("-t", "--response_template",
                    dest="HTML_TEMPLATE",
                    default="template.html",
                    help="Template file for html responses", metavar="<file>.html")

parser.add_argument("-r", "--html_root",
                    dest="HTML_ROOT",
                    default="",
                    help="HTML document root", metavar="<dir>")

parser.add_argument(
    "-m", "--make", dest="MAKE",
    default="",
    help="make product directly and quit", metavar="<file>"
)

parser.add_argument("-v", "--verbose", dest="VERBOSE", default=5, metavar="<level>",
    help="Print status messages to stdout")


    

    
#(options, args) = parser.parse_args()
options = parser.parse_args()

if (not options):
    parser.print_help()
    exit(1)
    
if (options.VERBOSE > 10):
    print options

if (options.CONF):
    if (options.VERBOSE > 4):
        print "Reading conf: {0}".format(options.CONF)
    product_server.read_conf(options.CONF)


# Override confs
if (options.HTTP_PORT):
    product_server.HTTP_PORT = options.HTTP_PORT

if (options.HTML_ROOT):
    product_server.HTML_ROOT = options.HTML_ROOT

if (options.HTML_TEMPLATE):
    product_server.HTML_TEMPLATE = options.HTML_TEMPLATE

if (options.VERBOSE > 6):
    nutils.print_dict(product_server.get_status())
    #nutils.print_dict(nutils.get_entries(product_server))

# Testing only. Use nutshell.py for command-line use
if (options.MAKE):
    if (options.VERBOSE > 4):
        print "Making product: {0}".format(options.MAKE)
    product_info = nutshell.ProductInfo(options.MAKE)
    product = product_server.make_request(product_info, ['MAKE'])
    print product.log.str()
    exit(0)


# TODO if (! file not exits options.HTTM_TEMPLATE):

# Proceed to start the server.

MyHandler.directory = product_server.HTML_ROOT
SimpleHTTPServer.SimpleHTTPRequestHandler.directory = product_server.HTML_ROOT

   
server_class = BaseHTTPServer.HTTPServer
# server_class = SimpleHTTPServer.BaseHTTPServer
    
httpd = server_class((HOST_NAME, int(product_server.HTTP_PORT)), MyHandler)

if (options.VERBOSE > 1):
    print 'Starting NutServer (port={0}, root={1})'.format(product_server.HTTP_PORT, MyHandler.directory)
    #print dir(httpd)
    nutils.print_dict(nutils.get_entries(httpd))


#print 'http request example: ' + 'http://127.0.0.1:8088/nutshell/server?request=INPUTS&product=201708121600_radar.rack.comp_SIZE=800,800_SITES=fikor,fivan,fiika_BBOS=20,60,30,70.png'

try:
    httpd.serve_forever()
    # httpd.handle_request()
except KeyboardInterrupt:
    print
    print "Keyboard interrupt (CTRL-C)"
    print "Stopping server"
    pass

#print postVars
#httpd.server_close()
