In [973]: %history
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
os.getcwd()
import os
os.getcwd()
import nutshell
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProduct('200206121845_radar.rack.comp_SITES=fi_BBOX=20,60,30,70.png')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('200206121845_radar.rack.comp_SITES=fi_BBOX=20,60,30,70.png')
p
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
import os
help os.mkdir
help os.mkdir()
help os.mkdir
help (os.mkdir=
)
help (os.mkdir)
help (os.mkdir)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
help(os.makedirs)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
ls /home/mpeura/venison/cache/2002/06/12/r
ls /home/mpeura/venison/cache/2002/06/12/
ls /home/mpeura/venison/cache/2002/06/12/radar/
ls -ltra /home/mpeura/venison/cache/2002/06/12/radar/
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
import op
import os
os.path.exists
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
p = s.createProductInfo('200206121845_radar.rack.comp_SITES=fik_BBOX=20,60,30,70.png')
s.makeProduct(p)
history
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
pol =  s.createProductInfo('201708121600_radar.polar.fikor.h5')
s.makeProduct(pol)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(pol)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(pol)
s.makeProduct(p)
rm /home/mpeura/venison/cache/2017/08/12/radar/rack/comp/201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1*
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
s.makeProduct(p)
history
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
s.makeProduct(p)
x={'FIKOR': '201708121600_radar.polar.fikor.h5', 'FIIKA': '201708121600_radar.polar.fiika.h5', 'FIVAN': '201708121600_radar.polar.fivan.h5'}
print (*x)
print (**x)
dir(x)
x.keys()
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
p = s.createProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo.parse('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
p = nutshell.ProductInfo()
p.parse(.parse('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
)
p.parse('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
)
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
p.parse('koe.png')
p.str()
import re
re.compile(/a-c/)
re.compile("a-c")
re.compile("[:alpha:]")
re.match("2kk2")
m = re.compile("[:alpha:]")
m.match("mika")
m.match("mika"); m.groups()
t = m.match("m")
m.match("m")
m.groups
m = re.compile("[[:alpha:]]+")
m.match("m")
m.groups
m.groups()
m = re.compile("[a-z]+")
m.groups()
m.groups
productRe = re.compile("^(([0-9]+)_)?([^_]+)(_(.*))?\\.(\\w+)$")
productRe.match("2020")
p = re.compile("^(([0-9]+)_)?([^_]+)(_(.*))?\\.(\\w+)$")
p = re.compile("^([0-9]+)$")
p.match("2002")
p.match("2002a")
p.match("2002a"); p.groups
p.match("\W"); p.groups
p = re.compile("^(\\W+)$")
p.match("W"); p.groups
p.match("W a"); p.groups
p.match("Wa"); p.groups
p.match("  "); p.groups
p.match("::"); p.groups
p.match("  "); p.groups
p.match("  "); p.groups
p = re.compile("^(\\S+)$")
p.match("  "); p.groups
p.match("x"); p.groups
p.match("xx"); p.groups
p.match(""); p.groups
p = re.compile("^(\\w+)$")
p.match("xx"); p.groups
p.match("xx "); p.groups
p.match("xx 12"); p.groups
p.match(".xx 12"); p.groups
p = re.compile("^(\\w+)x$")
p.match(".xx 12"); p.groups
p.match("x"); p.groups
p.match("wqx"); p.groups
p
p.match("dmdm")
m = p.match("dmdm")
m
p = re.compile("^(\\w+)x$")
m = p.match("dmdmx")
m = p.match("sx")
m = p.match("sx"); m
m = p.match("sx"); m.groups()
m = p.match("x"); m.groups()
m = p.match("sssx"); m.groups()
p = re.compile("(\\W+)")
m = p.match("x"); m.groups()
m = p.match("."); m.groups()
m = p.match(".;"); m.groups()
m = p.match("&.;"); m.groups()
m = p.match("&.;a"); m.groups()
m = p.match("a&.;a"); m.groups()
m = p.match("&.;a"); m.groups()
m = p.match("&.;"); m.groups()
p
"2020/04/29 18:45"
d="2020/04/29 18:45"
d.replace(p,'q')
d.replace(r'[a-z]','q')
d.replace(r'[a-z]'+,'q')
d.replace(r'[a-z]+','q')
d.replace(r'[^0-9]+','q')
d.replace(r'[0-9]+','q')
d.replace(r'[/]+','q')
d.replace(r'/+','q')
d.replace(r'/','q')
d.replace(r'/ ','q')
d.replace('/ ','q')
d.replace('/','q')
p = re.compile("(\\W+)")
p.sub(d)
p.sub(d, "X")
p = re.compile("(\\w+)")
p.sub(d, "X")
d
p = re.compile("\\s+")
p.sub(d, "X")
p.sub(d, "Xs")
p = re.compile("2+")
p.sub(d, "X")
p.sub(d, "X+")
p.sub(d, "X")
d
p = re.compile("[0-9]")
p.sub(d, "X")
m = p.match(d)
m = p.match(d); m
m = p.match(d); m.groups()
m = p.match("9"); m.groups()
m = p.match("921"); m.groups()
p = re.compile("[0-9]+")
p = re.compile("([0-9]+)(.*)")
m = p.match("9"); m.groups()
m = p.match("9sa"); m.groups()
p.sub("9sa", "$1")
p.sub("9sa", "1")
p.sub("9sa", "{}sa1")
p.sub("9sa", "{1}sa1")
p.sub("9sa", "{}sa1")
p.sub("9sa", "${}sa1${2}")
p.sub("9sa", "${1}sa1${2}")
re.sub("a", "x", d)
re.sub("\w", "x", d)
re.sub("\W", "x", d)
re.sub("\W", "", d)
d
%history
history
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
s.makeProduct(p)
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
s.makeProduct(p)
import http.server
import socketserver
PORT = 8000
Handler = http.server.SimpleHTTPRequestHandler
with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("serving at port", PORT)
        httpd.serve_forever()
with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("serving at port", PORT)
        httpd.serve_forever()
with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("serving at port", PORT)
        httpd.serve_forever()
with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
a
a = [2, 2, 129, 22]
for i in a:
    print a
for i in a:
    print a[i]
for i in a:
    print i
a
b = []
b.append(**a)
b.append(*a)
b
b.extend(a)
n
b
a
c = (a,b)
c
type(c)
c[0]
c[1]
t = (1, )
t
typeof(t)
type(t)
t.count
t.index
t.index()
t.index(1)
t.index(2)
t[0]
a,b = t
t = (1, 2,3)
a,b = t
t = (1, 2)
a,b = t
a
import urllib
urllib.splitquery("skks=s&sk=1")
urllib.splitquery("mika?skks=s&sk=1")
urllib.splitattr("mika?skks=s&sk=1")
urllib.splitvalue("skks=s&sk=1")
import urllib.parse
import urllib2.parse
import parse from urllib
from urllib import parse
import urllib2
urllib2.parse_http_list
urllib2.parse_http_list('127.0.0.1:8088/rauno/ahonen?mika=ks&mikko=2')
urllib2.parse_keqv_list('127.0.0.1:8088/rauno/ahonen?mika=ks&mikko=2')
urllib2.parse_keqv_list('127.0.0.1:8088/rauno/ahonen?mika=ks&mikko=2')
who
a
b
c
d
p
m
x
for k,v in x:
    print k,v
x.items
x.items()
for k,v in x.items():
    print k,v
reload(nutshell); s = nutshell.ProductServer('nutshell.cnf')
nutshell.ProductServer
nutshell.ProductServer.HTTP_PORT
nutshell.ProductServer.HTTP_PORT = 1217
s
s.HTTP_PORT
s = nutshell.ProductServer('nutshell.cnf')
s.HTTP_PORT
s = nutshell.ProductServer()
s.HTTP_PORT
s = nutshell.ProductServer('nutshell.cnf')
s.HTTP_PORT
import BaseHTTPServer
import SimpleHTTPServer
import xml.etree.ElementTree as ET
top = ET.Element()
top = ET.Element('SPAN')
top
str(top)
top.tag
par = ET.Element('par')
par = ET.Element('p')
par = ET.Element('p', {"mika": "mäki"})
par
par.attrib
mika=(1,)
type(mika)
import nutxml
import nutxml
import nutxml
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
dir
who
%history p
%history
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
print nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
print nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
print nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
reload(nutxml)
print nutxml.TupleLayout.get({"a": 1}, nutxml.TupleLayout.tableTr)
p.PARAMETERS
print nutxml.TupleLayout.get(p.PARAMETERS, nutxml.TupleLayout.tableTr)
t = ET.ElementTree()
t
e = ET.Element()
e = ET.Element('body')
e.find('body')
i = e.find('body')
i
span = ET.Element('span', {'id': 'mika'})
e.append(span)
e.items()
e.getchildren()
e.find('mika')
e.find('mika')
ET.tostring()
ET.tostring(e)
ls
htmlDoc = ET.parse('response.html')
ET.tostring(htmlDoc)
htmlDoc.getroot()
ET.tostring(htmlDoc.getroot())
r = htmlDoc.getroot()
r.iter('body')
it = r.iter('body')
it
it()
for i in  r.iter('body'):
    print i
e.copy()
t
e2 = e.copy()
r
r2 = r.copy()
ET.tostring(r2)
r2.set("Mika", "mäki")
ET.tostring(r2)
r2.set("Mika", "mki")
ET.tostring(r2)
ET.tostring(r)
who
t
r
ET.tostring(r)
ET.tostring(r2)
ET.tostring(r2)
r2.find('h1')
r2.findall('h1')
r2.findall('/h1')
r.findall('/h1')
t.findall('/h1')
t.findall('./h1')
t
t.getroot()
%hist
d
htmlDoc.findall('./h1')
htmlDoc.findall('././h1')
htmlDoc.findall('h1')
htmlDoc.findall('*/h1')
htmlDoc.findall('*/h1[id=""]')
htmlDoc.findall('*/h1[id!=""]')
htmlDoc.findall('*/h1[]')
htmlDoc.findall('*/h1')
htmlDoc = ET.parse('response.html')
htmlDoc.findall('*/span')
htmlDoc.findall('span')
htmlDoc.findall('./span')
htmlDoc.findall('././span')
htmlDoc.findall('./body/span')
htmlDoc.findall('body/span')
htmlDoc.findall('body/span[@id=input]')
htmlDoc.findall('body/span[@id="input"]')
htmlDoc.findall('body/span[@id=""]')
htmlDoc.findall('body/span[@id]')
htmlDoc.findall('body/span[@id]')
rapo = 'mika?sika'
rapo.split()
rapo.split('?')
rapo.split('#')
rapo.split('#',2)
help (split)
help ("".split)
who
a
b
d
e
x
ar = [5,6,7,8,9]
ar[2:]
ar[2]
ar[4]
ar[4:]
FIIKA='201708121600_radar.polar.fiika.h5'
FIIKA.find('_')
FIIKA.find('.')
i=FIIKA.find('.')
FIIKA[0:i]
FIIKA[i]
FIIKA[i:]
i=FIIKA.find('x')
i
FIIKA[i:-1]
FIIKA[-1:]
if x == 4: print x, y; x, y = y, x
x=4
if x == 4: print x, y; x, y = y, x
y=3
if x == 4: print x, y; x, y = y, x
y
x, y = y, x
y
class person: 
        def __init__(self): 
                self.name = 'AKASH'
                self.db = self.Dob()
    def display(self): 
            print('NAME = ', self.name)
    # this is inner class
    class Dob: 
            def __init__(self): 
                    self.dd = 10
                    self.mm = 3
                    self.yy = 2000
                def display(self): 
                        print('DOB = {}/{}/{}'.format(self.dd, self.mm, self.yy))
# creating person class object
p = person()
p.display()
# create inner class object
x = p.db
x.display()
class person: 
        def __init__(self): 
                self.name = 'AKASH'
                self.db = self.Dob()
    def display(self): 
            print('NAME = ', self.name)
    # this is inner class
    class Dob: 
            def __init__(self): 
                    self.dd = 10
                    self.mm = 3
                    self.yy = 2000
                def display(self): 
                        print('DOB = {}/{}/{}'.format(self.dd, self.mm, self.yy))
%paste
%paste
class person: 
        def __init__(self): 
                self.name = 'AKASH'
                self.db = self.Dob()
    def display(self): 
            print('NAME = ', self.name)
    # this is inner class
    class Dob: 
            def __init__(self): 
                    self.dd = 10
                    self.mm = 3
                    self.yy = 2000
                def display(self): 
                        print('DOB = {}/{}/{}'.format(self.dd, self.mm, self.yy))
# creating person class object
p = person()
p.display()
# create inner class object
x = p.db
x.display()
class A:
    a = 1;
    Class B:
        b = 2;
class A:
    a = 1;
    class B:
        b = 2;
a = A()
a.a
a.a = 123
aa = A()
a
aa.a
A.a
A.a = 2212
aa = A()
aa.a
b = A.B()
b.b
b = a.B()
b.__doc__
b.__module__
 urllib.parse
urllib.parse
import urllib
urllib.parse
urllib.parse()
import urllib3
urllib.parse()
import urllib.parse
import urllib3.parse
import urllib2.parse
import urllib.parse
import urllib3.parse
import urllib3
urllib3.util.parse_url('Hell%C3%B6%20W%C3%B6rld%40Python')
urllib.util.parse_url('Hell%C3%B6%20W%C3%B6rld%40Python')
import urllib
urllib.util.parse_url('Hell%C3%B6%20W%C3%B6rld%40Python')
import urllib2
urllib2.util.parse_url('Hell%C3%B6%20W%C3%B6rld%40Python')
urllib.splitquery('')
urllib.splitquery('http://127.0.0.1:8088/nutshell/server?request=INPUTS&product=201708121600_radar.rack.comp_SIZE=800,800_SITES=fik,fiika,fiv_BBOX=20,60,30,70_3211.png')
urllib.unquote('åaäaä')
help(urllib.unwrap)
help(urllib.wrap)
help(urllib.url2pathname)
help(urllib.urlencode)
help(urllib.basejoin)
help(urllib.split)
help(urllib.splitattr)
urllib.splitattr('http://127.0.0.1:8088/nutshell/server?request=INPUTS&product=201708121600_radar.rack.comp_SIZE=800,800_SITES=fik,fiika,fiv_BBOX=20,60,30,70_3211.png')
urllib.splitattr('request=INPUTS&product=201708121600_radar.rack.comp_SIZE=800,800_SITES=fik,fiika,fiv_BBOX=20,60,30,70_3211.png')
help(urllib.splitattr)
urllib.unquote('201708121600_radar.rack.comp_SIZE%3D800%2C800_SITES%3Dfikor%2Cfivan%2Cfiika_BBOS%3D20%2C60%2C30%2C70.png')
k,v = "ksksk?ksksk".split('?')
k
v
k,v = "ksksk?ksksk".split('#')
k,v = "ksksk?ksksk".split('#'),None
k
v
v
type(v)
KeyError("keijo")
x = KeyError("keijo")
throw x
raise x
keijo = "1,2,3,4".split(''),'Mika'
keijo = "1,2,3,4".split(','),'Mika'
keijo
"1,2,3,4".split(','),'Mika'
*"1,2,3,4".split(','),'Mika'
**"1,2,3,4".split(','),'Mika'
"1,2,3,4".split(',').append(None)
"1,2,3,4".split(',').append(None)
k = "1,2,3,4".split(',').append(None)
k
k = ("1,2,3,4".split(',')).append(None)
k
k = ("1,2,3,4".split(','))
k
k.append(None)
k = ("1,2,3,4".split(','), None)
k
k = ("1,2,3,4".split(','))
k
k = ("1,2,3,4".split(','),)
k
re.compile('^([A-Za-z)=([^#]+)(#.*)$'
)
re.match('MIKA="kksk"')
m = re.compile('^([A-Za-z)=([^#]+)(#.*)$'
)
r = re.match(m. 'MIKA="kksk"')
r = re.match(m, 'MIKA="kksk"')
r
r = re.match(m, 'MIKA=kksk')
m = re.compile('^([A-Za-z)=.*')
m = re.compile('^([A-Za-z)=.*)')
m = re.compile('^([A-Za-z])=.*')
r = re.match(m, 'MIKA=kksk')
r
m = re.compile('^([A-Za-z])=.*');  r = re.match(m, 'MIKA=kksk')
r
m = re.compile('^([A-Za-z]+)=.*');  r = re.match(m, 'MIKA=kksk')
r
r.groups()
m = re.compile('^([A-Za-z]+)=.*');  r = re.match(m, 'MIKA=kksk'); r.groups()
m = re.compile('^([A-Za-z]+)=(.*)');  r = re.match(m, 'MIKA=kksk'); r.groups()
m = re.compile('^([A-Za-z]+)=(.*)');  r = re.match(m, 'MIKA=kksk # skks'); r.groups()
m = re.compile('^([A-Za-z]+)=(.*)');  r = re.match(m, 'MIKA="kksk" # skks'); r.groups()
m = re.compile('^([A-Za-z]+)=([^#]*)(#.*)?');  r = re.match(m, 'MIKA="kksk" # skks'); r.groups()
m = re.compile('^([A-Za-z]+)=([^#]*)(#.*)?');  r = re.match(m, 'MIKA="kksk"  skks'); r.groups()
m = re.compile('^([A-Za-z]+)=([^#]*)(#.*)?');  r = re.match(m, 'MIKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'MIKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M_IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M.IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M-IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M_IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, 'M_IKA="kksk" # skks'); r.groups()
m = re.compile('^([\w]+)=([^#]*)(#.*)?');  r = re.match(m, '1M_IKA="kksk" # skks'); r.groups()
m = re.compile('^([A-Za-z][\w]*)=([^#]*)(#.*)?');  r = re.match(m, '1M_IKA="kksk" # skks'); r.groups()
m = re.compile('^([A-Za-z][\w]*)=([^#]*)(#.*)?');  r = re.match(m, 'M_IKA="kksk" # skks'); r.groups()
'  ddds dsds  '.strip()
who
p = nutshell.ProductInfo()
p.return=1
p.return
p
p.ID
p.ID = ""
p.MIKA
p.MIKA =1
p.returncode = 1
p
p.who
who
%history
nutshell.ProductServer.getInputList()
who
a
b
c
c[1]
c=c[1]
c.pop()
import nutxml
root = ET.parse('template.html')
!ls
ls
pwd
!cd ../nutshell
pwd
cd
cd nutshell
cd python
root = ET.parse('template.html')
reload(nutxml)
nutxml.get_by_id('version')
nutxml.get_by_id(root, 'version')
nutxml.get_by_id(root, 'version', 'span')
reload(nutxml)
nutxml.get_by_id(root, 'version', 'span')
nutxml.get_by_id(root, 'version', 'span')
reload(nutxml)
nutxml.get_by_id(root, 'version', 'span')
nutxml.get_by_id(root, 'version', 'p')
p = nutxml.get_by_id(root, 'version', 'p')
p.text="Rejo"
ET.tostring(root)
ET.tostring(root.getroot())
for i in root:
    print i
for i in root.find('body'):
    print i
for i in root.find():
    print i
for i in root.find('head'):
    print i
root.tag
ET.tostring(root.getroot())
root
et = ET.parse('template.html')
root = et.getroot()
for i in root:
    print i
root.get('body')
b = root.get('body')
reload(nutxml)
nutxml.get_body(root)
nutxml.get_head(root)
 b = root.get('body')
b
b =  nutxml.get_body(root)
b
reload(nutxml)
b =  nutxml.get_body(root)
b
b.text = "MIKA"
b.tail ="SIKA"
ET.tostring(b)
ET.tostring(b)
reload(nutxml)
data = {"mika":"mäki", "reijo": "käki"}
nutxml.get_table(nutxml.KeyValueRowGenerator, data)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
ET.tostring(b
table)
ET.tostring(table)
table
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
table
ET.tostring(table)
table
ET.tostring(table)
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
ET.tostring(table)
data
data={"veikko": "safe", "mika": "toka"}
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
ET.tostring(table)
help(ET.tostring)
reload(nutxml)
reload(nutxml)
reload(nutxml)
dir(nutxml)
nutxml.__doc__
nutxml.__file__
nutxml.__builtins__
dir(nutxml)
nutxml.__package__
nutxml.__name__
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data)
ET.tostring(table)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
ET.tostring(table)
dir(nutxml)
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
ET.tostring(table)
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
reload(nutxml)
ET.tostring(table)
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
ET.tostring(table)
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
ET.tostring(table)
for i in data:
    print i
for i in data.items():
    print i
for i in data.items():
    print i
tuple=('veikko', 'safe')
tuple.count
tuple.index()
tuple.index(1)
tuple=('veikko', 'safe', 'joukamo')
tuple[2:]
tuple[1:]
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
reload(nutxml)
table = nutxml.get_table(nutxml.KeyValueRowGenerator, data, {"title": "RAIMO"})
ET.tostring(table)
urllib.splitquery("ksksk?"")
urllib.splitquery("ksksk?ss")
urllib.splitquery("ksksk?")
urllib.splitquery("ksksk")
help(urllib.splitquery)
help(urllib.splitattr)
help(urllib.splitvalue)
help(urllib.splitquery)
help(urllib.splitattr)
help(urllib.splitvalue)
SimpleHTTPServer.SimpleHTTPRequestHandler
SimpleHTTPServer.SimpleHTTPRequestHandler
tree
tree = ET.ElementTree()
tree
tree.getroot()
t = tree.getroot()
t
help (ET.ElementTree)
help (ET.tostring)
help (ET.tostring)
tree = ET.parse('template.html')
html.findall('{0}[@id="{1}"]'.format(tag,id))
html = tree.getroot()
html.findall('{0}[@id="{1}"]'.format("span","input"))
html.findall('{0}[@id="{1}"]'.format("span","inputs"))
html.findall('{0}[@id="{1}"]'.format("","inputs"))
html.findall('{0}[@id="{1}"]'.format("","input"))
html.findall('{0}[@id="{1}"]'.format("","greeting"))
html.findall('[@id="greeting"]')
html.findall('h1[@id="greeting"]')
html.findall('h1')
html.findall('body')
html.find('body')
html.find('span')
html.findall('span')
html.findall('./span')
html.findall('../span')
html.findall('*/span')
html.findall('*/[@id="greeting"]')
html.findall('**/[@id="greeting"]')
html.findall('**/span[@id="input"]')
html.findall('**/span[@id="inputs"]')
html.findall('**/[@id="inputs"]')
html.findall('**/[@id="input"]')
html.findall('**/span[@id="input"]')
html.findall('//span[@id="input"]')
html.findall('.//span[@id="input"]')
html.findall('.//[@id="input"]')
html.findall('./[@id="input"]')
html.findall('.//*[@id="input"]')
html.findall('*[@id="input"]')
html.findall('.//*[@id="input"]')
os.times
os.times()
os.times()
os.times()
os.times()
os.times()
os.times()
os.times()
os.times()
os.getloadavg()
%hist
html.findall('./[@id="input"]')
html.findall('./[@id="input"]')
html.findall('./*[@id="input"]')
html.findall('.//*[@id="input"]')
html.findall('.//[@id="input"]')
html.findall('.//*[@id="input"]')
html.findall('.//*span[@id="input"]')
html.findall('./*/span[@id="input"]')
html.findall('./**/span[@id="input"]')
html.findall('./*/*/span[@id="input"]')
html.findall('./*//span[@id="input"]')
html.findall('.//*span[@id="input"]')
html.findall('.//*[@id="input"]')
html.findall('.//*[@id="status"]')
patte = '/ksmsk/skks//sslls/'
patte.split('/')
patte.find('/ksmks')
patte.find('/ksmsk')
patte.find('/ksms')
patte.find('/ksmsaa')
patte.find('/ksmsk')
patte.find('msk')
os.sep
type([])
a
b
c
type(c)
history
import nutshell
s = nutshell.ProductServer('nutshell.cnf')
s
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
reload(nutshell)
s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.handle_request(p)
req = s.handle_request(p)
req
req.path
req.product
req.product_info
req.product_server
req.path
subprocess
import subprocess
import nutshell
s = nutshell.ProductServer('nutshell.cnf')
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAXIMUM_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
s.makeProduct(p)
s.handle_request(p)
result = s.handle_request(p)
result
result.returncode
result.inputs
result = s.handle_request(p)
result = s.run_generator(p)
pr= s.ProductRequest(s,p)
pr
result = s.run_generator(pr)
reload(nutshell)
result = s.run_generator(pr)
result
print s.run_generator(pr)
pr.stdout
print pr.stdout
print pr.stderr
p = nutshell.ProductInfo('201708121600_radar.rack.comp_PPROD=_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAX_PALETTE=default_TRANSP2=0.1:0.3,0,0.8.png')
pr= s.ProductRequest(s,p)
print s.run_generator(pr)
print pr.stderr
print pr.stdout
print pr
reload(nutshell)
pr= s.ProductRequest(s,p)
pr.cache_dir
pr.path
pr.returncode
pr.stdout
pr.stderr
pr.product
reload(nutshell)
print s.run_generator(pr)
pr.stdout
print pr.stdout
print pr.stderr
p = nutshell.ProductInfo('201708121600_radar.rack.comp_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAX.png')
pr= s.ProductRequest(s,p)
print s.run_generator(pr)
print pr.stderr
print pr.stdout
print pr.stderr
pr= s.ProductRequest(s,p)
print pr.stderr
print s.run_generator(pr)
print pr.stderr
print pr.stdout
print s.run_generator(pr)
print pr.stdout
pr= s.ProductRequest(s,p)
result = s.handle_request(p)
result = s.handle_request(p)
result
result.product
result.path
result.returncode
reload(nutshell)
p = nutshell.ProductInfo('201708121600_radar.rack.comp_BBOX=17.13,57.93,29.41,64.08_SIZE=800,800_PROJ=4326_SITES=fikor,fivan,fiika_METHOD=MAX.png')
result = s.handle_request(p)
reload(nutshell)
result = s.handle_request(p)
result.returncode
result.product
result = s.handle_request(p)
result.product
result = s.handle_request(p)
result.product
result = s.handle_request(p)
result.product
print s.run_generator(pr)
result.product
result.stdout
print result.stdout
print s.run_generator(pr)
print result.stdout
print result.stderr
print result.returncode
print s.run_generator(pr)
print pr.returncode
print pr.inputs
print pr.stdout
print s.run_generator(pr)
print pr.stdout
%history

